
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGN DIV ELSE EQ GE GT ID IF LE LPAREN LT MINUS NE NEG NUMBER OR PLUS RPAREN SEMI TIMESrecurrence : initialization ifinitialization : assignmentsassignments : assignment assignmentsassignments : assignment : ID ASSIGN expression SEMIexpression : expression PLUS termexpression : expression MINUS termexpression : termterm : term TIMES factorterm : term DIV factorterm : factorfactor : NUMBERfactor : IDfactor : MINUS factorfactor : LPAREN expression RPARENif : '
    
_lr_action_items = {'$end':([0,1,2,3,4,6,7,16,],[-4,0,-16,-2,-4,-1,-3,-5,]),'ID':([0,4,8,12,15,16,17,18,19,20,],[5,5,9,9,9,-5,9,9,9,9,]),'ASSIGN':([5,],[8,]),'NUMBER':([8,12,15,17,18,19,20,],[14,14,14,14,14,14,14,]),'MINUS':([8,9,10,11,12,13,14,15,17,18,19,20,21,22,23,24,25,26,27,],[12,-13,18,-8,12,-11,-12,12,12,12,12,12,-14,18,-6,-7,-9,-10,-15,]),'LPAREN':([8,12,15,17,18,19,20,],[15,15,15,15,15,15,15,]),'TIMES':([9,11,13,14,21,23,24,25,26,27,],[-13,19,-11,-12,-14,19,19,-9,-10,-15,]),'DIV':([9,11,13,14,21,23,24,25,26,27,],[-13,20,-11,-12,-14,20,20,-9,-10,-15,]),'SEMI':([9,10,11,13,14,21,23,24,25,26,27,],[-13,16,-8,-11,-12,-14,-6,-7,-9,-10,-15,]),'PLUS':([9,10,11,13,14,21,22,23,24,25,26,27,],[-13,17,-8,-11,-12,-14,17,-6,-7,-9,-10,-15,]),'RPAREN':([9,11,13,14,21,22,23,24,25,26,27,],[-13,-8,-11,-12,-14,27,-6,-7,-9,-10,-15,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'recurrence':([0,],[1,]),'initialization':([0,],[2,]),'assignments':([0,4,],[3,7,]),'assignment':([0,4,],[4,4,]),'if':([2,],[6,]),'expression':([8,15,],[10,22,]),'term':([8,15,17,18,],[11,11,23,24,]),'factor':([8,12,15,17,18,19,20,],[13,21,13,13,13,25,26,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> recurrence","S'",1,None,None,None),
  ('recurrence -> initialization if','recurrence',2,'p_recurrence','parser.py',6),
  ('initialization -> assignments','initialization',1,'p_initialization','parser.py',10),
  ('assignments -> assignment assignments','assignments',2,'p_assignments_1','parser.py',14),
  ('assignments -> <empty>','assignments',0,'p_assignments_2','parser.py',18),
  ('assignment -> ID ASSIGN expression SEMI','assignment',4,'p_assignment','parser.py',22),
  ('expression -> expression PLUS term','expression',3,'p_expression_plus','parser.py',26),
  ('expression -> expression MINUS term','expression',3,'p_expression_minus','parser.py',30),
  ('expression -> term','expression',1,'p_expression_term','parser.py',34),
  ('term -> term TIMES factor','term',3,'p_term_times','parser.py',38),
  ('term -> term DIV factor','term',3,'p_term_div','parser.py',42),
  ('term -> factor','term',1,'p_term_factor','parser.py',46),
  ('factor -> NUMBER','factor',1,'p_factor_num','parser.py',50),
  ('factor -> ID','factor',1,'p_factor_id','parser.py',54),
  ('factor -> MINUS factor','factor',2,'p_factor_negative','parser.py',58),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor_paren','parser.py',62),
  ('if -> <empty>','if',0,'p_if','parser.py',67),
]
